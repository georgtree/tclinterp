'\"
'\" '\" Copyright (c) George Yashin
'\"
.TH "tclinterp" 3tcl 0\&.1 "tcl_tools" "Tcl wrapper for C interpolation procedures"
.SH NAME
tclinterp - Commands in namespace tclinterp
.SH SYNOPSIS
\fBarray2list\fP \fIarray length\fP
.br
\fBcreateArray\fP \fIlist\fP
.br
\fBdeleteArrays\fP \fI?args?\fP
.br
\fBdeleteDoubleps\fP \fI?args?\fP
.br
\fBinterpLagr1d\fP \fI?args?\fP
.br
\fBinterpLeast1d\fP \fI?args?\fP
.br
\fBinterpLeast1dDer\fP \fI?args?\fP
.br
\fBinterpLin1d\fP \fI?args?\fP
.br
\fBinterpNear1d\fP \fI?args?\fP
.br
.SH ::TCLINTERP
.SH COMMANDS
.PP
.RS -4n
\fBarray2list\fR (::tclinterp)
.RE
.PP
Converts doubleArray to the list
.RS 4n\fBarray2list\fP \fIarray length\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
array
Array object\&.
.TP
length
Number of elements in array\&.
.RE
.PP
\fBReturn value\fR
.PP
list
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::array2list {array length} {

    # Converts doubleArray to the list
    #  array - array object
    #  length - number of elements in array
    # Returns: list
    for {set i 0} {$i<$length} {incr i} {
        lappend list [::tclinterp::doubleArray_getitem $array $i]
    }
    return $list
}
.fi
.RE
.PP
.RS -4n
\fBcreateArray\fR (::tclinterp)
.RE
.PP
Create doubleArray from the list
.RS 4n\fBcreateArray\fP \fIlist\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
list
List of values\&.
.RE
.PP
\fBReturn value\fR
.PP
array object
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::createArray {list} {

    # Create doubleArray from the list
    #  list - list of values
    # Returns: array object
    set length [llength $list]
    set a [::tclinterp::new_doubleArray $length]
    for {set i 0} {$i<$length} {incr i} {
        set iElem [@ $list $i]
        try {
            ::tclinterp::doubleArray_setitem $a $i $iElem
        } on error {errmsg erropts} {
            if {[dget $erropts -errorcode]=="SWIG TypeError"} {
                error "List must contains only double elements, but get '$iElem'"
            } else {
                error "Array creation failed with message '$errmsg' and opts '$erropts'"
            }
        }
    }
    return $a
}
.fi
.RE
.PP
.RS -4n
\fBdeleteArrays\fR (::tclinterp)
.RE
.PP
Deletes doubleArray objects
.RS 4n\fBdeleteArrays\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
args
List of arrays objects\&.
.RE
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::deleteArrays {args} {

    # Deletes doubleArray objects
    #  args - list of arrays objects
    foreach arg $args {
        ::tclinterp::delete_doubleArray $arg
    }
    return
}
.fi
.RE
.PP
.RS -4n
\fBdeleteDoubleps\fR (::tclinterp)
.RE
.PP
Deletes doublep objects
.RS 4n\fBdeleteDoubleps\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
args
List of doublep objects\&.
.RE
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::deleteDoubleps {args} {

    # Deletes doublep objects
    #  args - list of doublep objects
    foreach arg $args {
        ::tclinterp::delete_doublep $arg
    }
    return
}
.fi
.RE
.PP
.RS -4n
\fBinterpLagr1d\fR (::tclinterp)
.RE
.PP
Does Lagrange polynomial one-dimensional interpolation\&.
.RS 4n\fBinterpLagr1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::interpLagr1d {args} {

    # Does Lagrange polynomial one-dimensional interpolation\&.
    #  -x - list of independent variable (x) values
    #  -y - list of dependent variable (y) values
    #  -xi - list of independent variable interpolation (xi) values
    # Returns: list of interpolated dependent variable values, `yi`, at `xi`
    set arguments [argparse {
        {-x= -required}
        {-y= -required}
        {-xi= -required}
    }]
    set xLen [llength $x]
    set yLen [llength $y]
    set xiLen [llength $xi]
    if {$xLen!=$yLen} {
        error "Length of x '$xLen' must be equal to y '$yLen'"
    } elseif {$xiLen==0} {
        error "Length of interpolation points list xi must be more than zero"
    }
    set xArray [::tclinterp::createArray $x]
    set yArray [::tclinterp::createArray $y]
    set xiArray [::tclinterp::createArray $xi]
    set yiArray [::tclinterp::interp_lagrange 1 $xLen $xArray $yArray $xiLen $xiArray]
    set yiList [::tclinterp::array2list $yiArray $xiLen]
    ::tclinterp::deleteArrays $xArray $yArray $xiArray $yiArray
    return $yiList
}
.fi
.RE
.PP
.RS -4n
\fBinterpLeast1d\fR (::tclinterp)
.RE
.PP
Does least squares polynomial one-dimensional interpolation\&.
.RS 4n\fBinterpLeast1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-coeffs
Select the alternative output option\&.
.TP
-nterms
Number of terms of interpolation polynom, default is 3\&.
.TP
-w
List of weights, optional\&.
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi\&. If -coeffs switch is in args, the output
is dictionary that contains yi values under yi key, and the values of interpolation polynom coefficients under
the keys b, c and d\&.
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::interpLeast1d {args} {

    # Does least squares polynomial one-dimensional interpolation\&.
    #  -x - list of independent variable (x) values
    #  -y - list of dependent variable (y) values
    #  -xi - list of independent variable interpolation (xi) values
    #  -w - list of weights, optional
    #  -nterms - number of terms of interpolation polynom, default is 3
    #  -coeffs - select the alternative output option
    # Returns: list of interpolated dependent variable values, `yi`, at `xi`\&. If `-coeffs` switch is in args, the output
    # is dictionary that contains `yi` values under `yi` key, and the values of interpolation polynom coefficients under
    # the keys `b`, `c` and `d`\&.
    set arguments [argparse {
        {-x= -required}
        {-y= -required}
        {-xi= -required}
        -w=
        {-nterms= -default 3}
        -coeffs
    }]
    set xLen [llength $x]
    set yLen [llength $y]
    if {[info exists w]} {
        set wLen [llength $w]
    } else {
        set wLen [llength $x]
        set w [lrepeat $wLen 1]
    }
    set xiLen [llength $xi]
    if {$xLen!=$yLen} {
        error "Length of x '$xLen' must be equal to y '$yLen'"
    } elseif {$xLen!=$wLen} {
        error "Length of x '$xLen' must be equal to w '$wLen'"
    } elseif {$xiLen==0} {
        error "Length of interpolation points list xi must be more than zero"
    } elseif {[string is integer -strict $nterms]==0} {
        error "Number of terms must be of integer type"
    } elseif {$nterms<=0} {
        error "Number of terms must be more than zero"
    }
    set xArray [::tclinterp::createArray $x]
    set yArray [::tclinterp::createArray $y]
    set wArray [::tclinterp::createArray $w]
    set xiArray [::tclinterp::createArray $xi]
    set b [::tclinterp::new_doubleArray $nterms]
    set c [::tclinterp::new_doubleArray $nterms]
    set d [::tclinterp::new_doubleArray $nterms]
    # create polynomial coefficients for given data
    ::tclinterp::least_set $xLen $xArray $yArray $wArray $nterms $b $c $d
    # calculate polynomial value for each xi value
    for {set i 0} {$i<$xiLen} {incr i} {
        set iElem [::tclinterp::least_val $nterms $b $c $d [@ $xi $i]]
        lappend yiList $iElem
    }
    if {[info exists coeffs]} {
        set bList [::tclinterp::array2list $b $nterms]
        set cList [::tclinterp::array2list $c $nterms]
        set dList [::tclinterp::array2list $d $nterms]
        ::tclinterp::deleteArrays $b $c $d $xArray $yArray $xiArray
        return [dcreate yi $yiList coeffs [dcreate b $bList c $cList d $dList]]
    } else {
        ::tclinterp::deleteArrays $b $c $d $xArray $yArray $xiArray
        return $yiList
    }
    return
}
.fi
.RE
.PP
.RS -4n
\fBinterpLeast1dDer\fR (::tclinterp)
.RE
.PP
Does least squares polynomial one-dimensional interpolation with calculation of its derivative\&.
.RS 4n\fBinterpLeast1dDer\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-coeffs
Select the alternative output option\&.
.TP
-nterms
Number of terms of interpolation polynom, default is 3\&.
.TP
-w
List of weights, optional\&.
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
dict of interpolated dependent variable values and its derivatives under yi and yiDer keys\&. If
-coeffs switch is in args, the output is dictionary that contains yi values under yi key, yi derivatives
under yiDer key, and the values of interpolation polynom coefficients under the keys b, c and d\&.
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::interpLeast1dDer {args} {

    # Does least squares polynomial one-dimensional interpolation with calculation of its derivative\&.
    #  -x - list of independent variable (x) values
    #  -y - list of dependent variable (y) values
    #  -xi - list of independent variable interpolation (xi) values
    #  -w - list of weights, optional
    #  -nterms - number of terms of interpolation polynom, default is 3
    #  -coeffs - select the alternative output option
    # Returns: dict of interpolated dependent variable values and its derivatives under `yi` and `yiDer` keys\&. If
    # `-coeffs` switch is in args, the output is dictionary that contains `yi` values under `yi` key, `yi` derivatives
    # under `yiDer` key, and the values of interpolation polynom coefficients under the keys `b`, `c` and `d`\&.
    set arguments [argparse {
        {-x= -required}
        {-y= -required}
        {-xi= -required}
        -w=
        {-nterms= -default 3}
        -coeffs
    }]
    set xLen [llength $x]
    set yLen [llength $y]
    if {[info exists w]} {
        set wLen [llength $w]
    } else {
        set wLen [llength $x]
        set w [lrepeat $wLen 1]
    }
    set xiLen [llength $xi]
    if {$xLen!=$yLen} {
        error "Length of x '$xLen' must be equal to y '$yLen'"
    } elseif {$xLen!=$wLen} {
        error "Length of x '$xLen' must be equal to w '$wLen'"
    } elseif {$xiLen==0} {
        error "Length of interpolation points list xi must be more than zero"
    } elseif {[string is integer -strict $nterms]==0} {
        error "Number of terms must be of integer type"
    } elseif {$nterms<=0} {
        error "Number of terms must be more than zero"
    }
    set xArray [::tclinterp::createArray $x]
    set yArray [::tclinterp::createArray $y]
    set wArray [::tclinterp::createArray $w]
    set xiArray [::tclinterp::createArray $xi]
    set b [::tclinterp::new_doubleArray $nterms]
    set c [::tclinterp::new_doubleArray $nterms]
    set d [::tclinterp::new_doubleArray $nterms]
    set yiPnt [::tclinterp::new_doublep]
    set yiDerPnt [::tclinterp::new_doublep]
    # create polynomial coefficients for given data
    ::tclinterp::least_set $xLen $xArray $yArray $wArray $nterms $b $c $d
    # calculate polynomial value and derivative for each xi value
    for {set i 0} {$i<$xiLen} {incr i} {
        ::tclinterp::least_val2 $nterms $b $c $d [@ $xi $i] $yiPnt $yiDerPnt
        lappend yiList [::tclinterp::doublep_value $yiPnt]
        lappend yiDerList [::tclinterp::doublep_value $yiDerPnt]
    }
    if {[info exists coeffs]} {
        set bList [::tclinterp::array2list $b $nterms]
        set cList [::tclinterp::array2list $c $nterms]
        set dList [::tclinterp::array2list $d $nterms]
        ::tclinterp::deleteArrays $b $c $d $xArray $yArray $xiArray
        ::tclinterp::deleteDoubleps $yiPnt $yiDerPnt
        return [dcreate yi $yiList yiDer $yiDerList coeffs [dcreate b $bList c $cList d $dList]]
    } else {
        ::tclinterp::deleteArrays $b $c $d $xArray $yArray $xiArray
        ::tclinterp::deleteDoubleps $yiPnt $yiDerPnt
        return [dcreate yi $yiList yiDer $yiDerList]
    }
    return
}
.fi
.RE
.PP
.RS -4n
\fBinterpLin1d\fR (::tclinterp)
.RE
.PP
Does linear one-dimensional interpolation\&.
.RS 4n\fBinterpLin1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-x
List of independent variable (x) values, must be strictly increasing\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::interpLin1d {args} {

    # Does linear one-dimensional interpolation\&.
    #  -x - list of independent variable (x) values, must be strictly increasing
    #  -y - list of dependent variable (y) values
    #  -xi - list of independent variable interpolation (xi) values
    # Returns: list of interpolated dependent variable values, `yi`, at `xi`
    set arguments [argparse {
        {-x= -required}
        {-y= -required}
        {-xi= -required}
    }]
    set xLen [llength $x]
    set yLen [llength $y]
    set xiLen [llength $xi]
    if {$xLen!=$yLen} {
        error "Length of x '$xLen' must be equal to y '$yLen'"
    } elseif {$xiLen==0} {
        error "Length of interpolation points list xi must be more than zero"
    }
    set xArray [::tclinterp::createArray $x]
    if {[::tclinterp::r8vec_ascends_strictly $xLen $xArray]==0} {
        error "Independent variable array x not strictly increasing"
    }
    set yArray [::tclinterp::createArray $y]
    set xiArray [::tclinterp::createArray $xi]
    set yiArray [::tclinterp::interp_linear 1 $xLen $xArray $yArray $xiLen $xiArray]
    set yiList [::tclinterp::array2list $yiArray $xiLen]
    ::tclinterp::deleteArrays $xArray $yArray $xiArray $yiArray
    return $yiList
}
.fi
.RE
.PP
.RS -4n
\fBinterpNear1d\fR (::tclinterp)
.RE
.PP
Does nearest one-dimensional interpolation\&.
.RS 4n\fBinterpNear1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi
.PP
\fBSource\fR
.PP
.RS 4n
.nf
proc ::tclinterp::interpNear1d {args} {

    # Does nearest one-dimensional interpolation\&.
    #  -x - list of independent variable (x) values
    #  -y - list of dependent variable (y) values
    #  -xi - list of independent variable interpolation (xi) values
    # Returns: list of interpolated dependent variable values, `yi`, at `xi`
    set arguments [argparse {
        {-x= -required}
        {-y= -required}
        {-xi= -required}
    }]
    set xLen [llength $x]
    set yLen [llength $y]
    set xiLen [llength $xi]
    if {$xLen!=$yLen} {
        error "Length of x '$xLen' must be equal to y '$yLen'"
    } elseif {$xiLen==0} {
        error "Length of interpolation points list xi must be more than zero"
    }
    set xArray [::tclinterp::createArray $x]
    set yArray [::tclinterp::createArray $y]
    set xiArray [::tclinterp::createArray $xi]
    set yiArray [::tclinterp::interp_nearest 1 $xLen $xArray $yArray $xiLen $xiArray]
    set yiList [::tclinterp::array2list $yiArray $xiLen]
    ::tclinterp::deleteArrays $xArray $yArray $xiArray $yiArray
    return $yiList
}
.fi
.RE

