'\"
'\" '\" Copyright (c) George Yashin
'\"
.TH "tclinterp" 3tcl 0\&.11 "tcl_tools" "Tcl wrapper for C interpolation procedures"
.SH NAME
tclinterp - Commands in namespace tclinterp
.SH SYNOPSIS
\fBapproxCubicBetaSpline1d\fP \fI?args?\fP
.br
\fBapproxCubicBSpline1d\fP \fI?args?\fP
.br
\fBarray2list\fP \fIarray length\fP
.br
\fBarrays2lists\fP \fIvarNames arrays lengths\fP
.br
\fBbezier\fP \fI?args?\fP
.br
\fBdeleteArrays\fP \fI?args?\fP
.br
\fBdeleteDoubleps\fP \fI?args?\fP
.br
\fBduplListCheck\fP \fIlist\fP
.br
\fBgenBezier\fP \fI?args?\fP
.br
\fBinterpCubicSpline1d\fP \fI?args?\fP
.br
\fBinterpDivDif1d\fP \fI?args?\fP
.br
\fBinterpLagr1d\fP \fI?args?\fP
.br
\fBinterpLeast1d\fP \fI?args?\fP
.br
\fBinterpLeast1dDer\fP \fI?args?\fP
.br
\fBinterpLin1d\fP \fI?args?\fP
.br
\fBinterpNear1d\fP \fI?args?\fP
.br
\fBlist2array\fP \fIlist\fP
.br
\fBlists2arrays\fP \fIvarNames lists\fP
.br
\fBnewArrays\fP \fIvarNames lengths\fP
.br
\fBnewDoubleps\fP \fIvarNames\fP
.br
.SH ::TCLINTERP
.SH COMMANDS
.PP
.RS -4n
\fBapproxCubicBetaSpline1d\fR (::tclinterp)
.RE
.PP
Evaluates a cubic beta spline approximant\&.
.RS 4n\fBapproxCubicBetaSpline1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-beta1
The skew or bias parameter, beta1 = 1 for no skew or bias\&.
.TP
-beta2
The tension parameter, beta2 = 0 for no tension\&.
.TP
-t
List of independent variable (t) values\&.
.TP
-ti
List of independent variable interpolation (ti) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of approximation values yi at ti points\&.
.PP
.RS -4n
\fBapproxCubicBSpline1d\fR (::tclinterp)
.RE
.PP
Evaluates a cubic B spline approximant\&.
.RS 4n\fBapproxCubicBSpline1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-t
List of independent variable (t) values\&.
.TP
-ti
List of independent variable interpolation (ti) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of approximation values yi at ti points\&.
.PP
.RS -4n
\fBarray2list\fR (::tclinterp)
.RE
.PP
Create list from doubleArray object
.RS 4n\fBarray2list\fP \fIarray length\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
array
DoubleArray object\&.
.TP
length
Number of elements in doubleArray\&.
.RE
.PP
\fBReturn value\fR
.PP
list
.PP
.RS -4n
\fBarrays2lists\fR (::tclinterp)
.RE
.PP
Create lists from doubleArray objects, and set these lists to variables
.RS 4n\fBarrays2lists\fP \fIvarNames arrays lengths\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
arrays
List of doubleArray\&.
.TP
lengths
List of doubleArray lengths\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with lists are set in caller's scope
.PP
.RS -4n
\fBbezier\fR (::tclinterp)
.RE
.PP
Finds values of Bezier function at x points\&.
.RS 4n\fBbezier\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-a
Start of the interval\&.
.TP
-b
End of interval\&.
.TP
-n
Order of Bezier function, must be zero or more\&.
.TP
-x
List of x values\&.
.TP
-y
List of y control points values of size n+1\&.
.RE
.PP
\fBReturn value\fR
.PP
yi values of Bezier function at x points
.PP
.RS -4n
\fBdeleteArrays\fR (::tclinterp)
.RE
.PP
Deletes doubleArray objects
.RS 4n\fBdeleteArrays\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
args
List of arrays objects\&.
.RE
.PP
.RS -4n
\fBdeleteDoubleps\fR (::tclinterp)
.RE
.PP
Deletes doublep objects
.RS 4n\fBdeleteDoubleps\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
args
List of doublep objects\&.
.RE
.PP
.RS -4n
\fBduplListCheck\fR (::tclinterp)
.RE
.PP
Checks if list contains duplicates\&.
.RS 4n\fBduplListCheck\fP \fIlist\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
list
List to check\&.
.RE
.PP
\fBReturn value\fR
.PP
false if there are no duplicates and true if there are\&.
.PP
.RS -4n
\fBgenBezier\fR (::tclinterp)
.RE
.PP
Finds values of general Bezier function at specified t points\&.
.RS 4n\fBgenBezier\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-n
Order of Bezier function, must be zero or more\&.
.TP
-t
List of t points at which we want to evaluate Bezier function, best results are obtained within the interval \fI0,1\fP
.TP
-x
List of x control points values of size n+1\&.
.TP
-y
List of y control points values of size n+1\&.
.RE
.PP
\fBReturn value\fR
.PP
dict with lists of xi and yi points at specified t points
.PP
.RS -4n
\fBinterpCubicSpline1d\fR (::tclinterp)
.RE
.PP
Does piecewise cubic spline interpolation\&.
.RS 4n\fBinterpCubicSpline1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-deriv
Select the alternative output option\&.
.TP
-ibcbeg
Left boundary condition flag\&. Possible values: \fBquad\fP, the cubic spline should be a quadratic over the first interval; \fBder1\fP, the first derivative at the left endpoint should be YBCBEG; \fBder2\fP, the second derivative at the left endpoint should be YBCBEG; \fBnotaknot\fP, not-a-knot, the third derivative is continuous at T(2)\&.
.TP
-ibcend
Right boundary condition flag\&. Possible values: \fBquad\fP, the cubic spline should be a quadratic over the last interval; \fBder1\fP, the first derivative at the right endpoint should be YBCBEG; \fBder2\fP, the second derivative at the right endpoint should be YBCBEG; \fBnotaknot\fP, not-a-knot, the third derivative is continuous at T(2)\&.
.TP
-t
List of independent variable (t) values\&.
.TP
-ti
List of independent variable interpolation (ti) values\&.
.TP
-y
List of dependent variable (y) values\&.
.TP
-ybcbeg
The values to be used in the boundary conditions if ibcbeg is equal to der1 or der2, default is 0\&.0\&.
.TP
-ybcend
The values to be used in the boundary conditions if ibcend is equal to der1 or der2, default is 0\&.0\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values under\&. If -deriv switch is in args, the output is
dictionary that contains yi values under yi key, yi derivative under yder1 key, and yi second derivative
under yder2 key\&.
.PP
.RS -4n
\fBinterpDivDif1d\fR (::tclinterp)
.RE
.PP
Does divided difference one-dimensional interpolation\&.
.RS 4n\fBinterpDivDif1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-coeffs
Select the alternative output option\&.
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi\&. If -coeffs switch is in args, the output
is dictionary that contains yi values under yi key, and the values of difference table under the key coeffs\&.
.PP
.RS -4n
\fBinterpLagr1d\fR (::tclinterp)
.RE
.PP
Does Lagrange polynomial one-dimensional interpolation\&.
.RS 4n\fBinterpLagr1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi
.PP
.RS -4n
\fBinterpLeast1d\fR (::tclinterp)
.RE
.PP
Does least squares polynomial one-dimensional interpolation\&.
.RS 4n\fBinterpLeast1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-coeffs
Select the alternative output option\&.
.TP
-nterms
Number of terms of interpolation polynom, default is 3\&.
.TP
-w
List of weights, optional\&.
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi\&. If -coeffs switch is in args, the output
is dictionary that contains yi values under yi key, and the values of interpolation polynom coefficients under
the keys b, c and d\&.
.PP
.RS -4n
\fBinterpLeast1dDer\fR (::tclinterp)
.RE
.PP
Does least squares polynomial one-dimensional interpolation with calculation of its derivative\&.
.RS 4n\fBinterpLeast1dDer\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-coeffs
Select the alternative output option\&.
.TP
-nterms
Number of terms of interpolation polynom, default is 3\&.
.TP
-w
List of weights, optional\&.
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
dict of interpolated dependent variable values and its derivatives under yi and yiDer keys\&. If
-coeffs switch is in args, the output is dictionary that contains yi values under yi key, yi derivatives
under yiDer key, and the values of interpolation polynom coefficients under the keys b, c and d\&.
.PP
.RS -4n
\fBinterpLin1d\fR (::tclinterp)
.RE
.PP
Does linear one-dimensional interpolation\&.
.RS 4n\fBinterpLin1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-x
List of independent variable (x) values, must be strictly increasing\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi
.PP
.RS -4n
\fBinterpNear1d\fR (::tclinterp)
.RE
.PP
Does nearest one-dimensional interpolation\&.
.RS 4n\fBinterpNear1d\fP \fI?args?\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
-x
List of independent variable (x) values\&.
.TP
-xi
List of independent variable interpolation (xi) values\&.
.TP
-y
List of dependent variable (y) values\&.
.RE
.PP
\fBReturn value\fR
.PP
list of interpolated dependent variable values, yi, at xi
.PP
.RS -4n
\fBlist2array\fR (::tclinterp)
.RE
.PP
Create and initialize doubleArray object from the list
.RS 4n\fBlist2array\fP \fIlist\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
list
List of values\&.
.RE
.PP
\fBReturn value\fR
.PP
array object
.PP
.RS -4n
\fBlists2arrays\fR (::tclinterp)
.RE
.PP
Create and initialize doubleArray objects from lists, and set these objects to variables
.RS 4n\fBlists2arrays\fP \fIvarNames lists\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
lists
List of lists\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with doubleArray objects are set in caller's scope
.PP
.RS -4n
\fBnewArrays\fR (::tclinterp)
.RE
.PP
Creates doubleArray objects, and set these objects to variables
.RS 4n\fBnewArrays\fP \fIvarNames lengths\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.TP
lengths
List of doubleArray's lengths\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with doubleArray objects are set in caller's scope
.PP
.RS -4n
\fBnewDoubleps\fR (::tclinterp)
.RE
.PP
Creates doubleps objects, and set these objects to variables
.RS 4n\fBnewDoubleps\fP \fIvarNames\fP
.br
.RE
.PP
\fBParameters\fR
.RS 4n
.TP
varNames
List of variables names\&.
.RE
.PP
\fBReturn value\fR
.PP
variables with doubleps objects are set in caller's scope

