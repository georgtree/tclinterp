package require tcltest
namespace import ::tcltest::*

package require tclinterp
namespace import ::tclinterp::*
namespace import ::tclinterp::interpolation::*
namespace import ::tclinterp::approximation::*

set epsilon 1e-6
proc matchList {expected actual} {
    variable epsilon
    set match true
    set len [llength $expected]
    for {set i 0} {$i<$len} {incr i} {
        set exp [lindex $expected $i]
        set act [lindex $actual $i]
        if {(abs($act-$exp) > $epsilon) || (abs($act-$exp) > $epsilon)} {
            set match false
            break
        }
    }
    return $match
}
customMatch mtchLst matchList

### Auxilary procedures tests

test lists2arraysProcTest-1 {test of lists2arrays procedure} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
} -body {
    catch {::tclinterp::lists2arrays [list xVar yVar] [list $x]} errorStr
    return $errorStr
} -result "Length of varName list '2' must be equal to length of lists list '1'" -cleanup {
    unset x y errorStr
}

test array2listProcTest-1 {test of arrays2lists procedure} -setup {
    ::tclinterp::newArrays [list a b v] [list 3 3 3]
} -body {
    catch {::tclinterp::arrays2lists [list xVar yVar vVar] [list $a $b] [list 3 3 3]} errorStr
    return $errorStr
} -result "Length of varName list '3' must be equal to length of array list '2'" -cleanup {
    unset errorStr
    ::tclinterp::deleteArrays $a $b $v
}

test array2listProcTest-2 {test of arrays2lists procedure} -setup {
    ::tclinterp::newArrays [list a b v] [list 3 3 3]
} -body {
    catch {::tclinterp::arrays2lists [list xVar yVar vVar] [list $a $b $v] [list 3 3]} errorStr
    return $errorStr
} -result "Length of varName list '3' must be equal to length of lengths list '2'" -cleanup {
    unset errorStr
    ::tclinterp::deleteArrays $a $b $v
}

test newArraysProcTest-4 {test of newArrays procedure} -body {
    catch {::tclinterp::newArrays [list a b v] [list 3 3]} errorStr
    return $errorStr
} -result "Length of varName list '3' must be equal to length of lengths list '2'" -cleanup {
    unset errorStr
}

### Linear interpolation tests

test lin1dProcTest-1 {test procedure of linear 1d interpolation} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    lin1d -x $x -y $y -xi $xi
} -result [list 2.5 6.5 12.5 20.5] -cleanup {
    unset x y xi
}

test lin1dProcTest-2 {test procedure of linear 1d interpolation with different lengths of lists} -setup {
    set x [list 1 2 3 4 5 6]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {lin1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Length of -y '5' must be equal to length of -x '6'" -cleanup {
    unset x y xi errorStr
}

test lin1dProcTest-3 {test procedure of linear 1d interpolation with zero length of xi} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi {}
} -body {
    catch {lin1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Length of interpolation points list -xi must be more than zero" -cleanup {
    unset x y xi errorStr
}

test lin1dProcTest-4 {test procedure of linear 1d interpolation with different non-double value of list element} -setup {
    set x [list 1 2 3 4 5i]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {lin1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "List must contains only double elements, but get '5i'" -cleanup {
    unset x y xi errorStr
}

test lin1dProcTest-5 {test procedure of linear 1d interpolation with non-monotonic x} -setup {
    set x [list 1 2 3 5 4]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {lin1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Independent variable array -x is not strictly increasing" -cleanup {
    unset x y xi errorStr
}

test lin1dProcTest-6 {test procedure of linear 1d interpolation} -match mtchLst -setup {
    set x [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set xi [list -1.2000 -1.1500 -1.1000 -1.0500 -1.0000 -0.9500 -0.9000 -0.8500 -1.0000 -0.7500 -0.7000 -0.6500\
                    -1.0000 -0.5500 -0.5000 -0.4500 -1.0000 -0.3500 -0.3000 -0.2500 -1.0000 -0.1500 -0.1000 -0.0500\
                    -1.0000 0.0500 0.1000 0.1500 -1.0000 0.2500 0.3000 0.3500 -1.0000 0.4500 0.5000 0.5500\
                    -1.0000 0.6500 0.7000 0.7500 -1.0000 0.8500 0.9000 0.9500 1.0000 1.0500 1.1000]
} -body {
    return [lin1d -x $x -y $y -xi $xi]
} -result [list 0.0180995 0.02319 0.0282805 0.033371 0.0384615 0.043552 0.0486425 0.053733 0.0384615 0.0691176\
                   0.0794118 0.0897059 0.0384615 0.125 0.15 0.175 0.0384615 0.275 0.35 0.425 0.0384615 0.625 0.75\
                   0.875 0.0384615 0.875 0.75 0.625 0.0384615 0.425 0.35 0.275 0.0384615 0.175 0.15 0.125 0.0384615\
                   0.0897059 0.0794118 0.0691176 0.0384615 0.053733 0.0486425 0.043552 0.0384615 0.033371\
                   0.0282805] -cleanup {
    unset x y xi
}

### Linear interpolation tests

test near1dProcTest-1 {test procedure of nearest 1d interpolation} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    near1d -x $x -y $y -xi $xi
} -result [list 4.0 9.0 16.0 25.0] -cleanup {
    unset x y xi
}

test near1dProcTest-2 {test procedure of nearest 1d interpolation with different lengths of lists} -setup {
    set x [list 1 2 3 4 5 6]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {near1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Length of -y '5' must be equal to length of -x '6'" -cleanup {
    unset x y xi errorStr
}

test near1dProcTest-3 {test procedure of nearest 1d interpolation with zero length of xi} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi {}
} -body {
    catch {near1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Length of interpolation points list -xi must be more than zero" -cleanup {
    unset x y xi errorStr
}

test near1dProcTest-4 {test procedure of nearest 1d interpolation} -setup {
    set x [list 1 3 2 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    near1d -x $x -y $y -xi $xi
} -result [list 1.0 9.0 16.0 25.0] -cleanup {
    unset x y xi
}

test near1dProcTest-5 {test procedure of nearest 1d interpolation} -match mtchLst -setup {
    set x [list -1 -0.951057 -0.809017 -0.587785 -0.309017 6.12323e-17 0.309017 0.587785 0.809017 0.951057 1]
    set y [list 0.0384615 0.0423501 0.0575947 0.103764 0.295221 1 0.295221 0.103764 0.0575947 0.0423501 0.0384615]
    set xi [list -1.0489 -1.0367 -1.0245 -1.0122 -1.0000 -0.9878 -0.9755 -0.9633 -1.0000 -0.9155 -0.8800 -0.8445\
                    -1.0000 -0.7537 -0.6984 -0.6431 -1.0000 -0.5181 -0.4484 -0.3787 -1.0000 -0.2318 -0.1545 -0.0773\
                    -1.0000 0.0773 0.1545 0.2318 -1.0000 0.3787 0.4484 0.5181 -1.0000 0.6431 0.6984 0.7537 -1.0000\
                    0.8445 0.8800 0.9155 -1.0000 0.9633 0.9755 0.9878 1.0000 1.0122 1.0245]
} -body {
    return [near1d -x $x -y $y -xi $xi]
} -result [list 0.0384615 0.0384615 0.0384615 0.0384615 0.0384615 0.0384615 0.0423501 0.0423501 0.0384615 0.0423501\
                   0.0575947 0.0575947 0.0384615 0.0575947 0.103764 0.103764 0.0384615 0.103764 0.295221 0.295221\
                   0.0384615 0.295221 1.0 1.0 0.0384615 1.0 1.0 0.295221 0.0384615 0.295221 0.295221 0.103764 0.0384615\
                   0.103764 0.103764 0.0575947 0.0384615 0.0575947 0.0575947 0.0423501 0.0384615 0.0423501 0.0423501\
                   0.0384615 0.0384615 0.0384615 0.0384615] -cleanup {
    unset x y xi
}

### Lagrange polynomial interpolation tests

test lagr1dProcTest-1 {test procedure of Lagrange polynomial 1d interpolation} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    lagr1d -x $x -y $y -xi $xi
} -result [list 2.25 6.25 12.25 20.25] -cleanup {
    unset x y xi
}

test lagr1dProcTest-2 {test procedure of Lagrange polynomial 1d interpolation with different lengths of lists} -setup {
    set x [list 1 2 3 4 5 6]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {lagr1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Length of -y '5' must be equal to length of -x '6'" -cleanup {
    unset x y xi errorStr
}

test lagr1dProcTest-3 {test procedure of Lagrange polynomial 1d interpolation with zero length of xi} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi {}
} -body {
    catch {lagr1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Length of interpolation points list -xi must be more than zero" -cleanup {
    unset x y xi errorStr
}

test lagr1dProcTest-4 {test procedure of Lagrange polynomial 1d interpolation} -setup {
    set x [list 1 3 2 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    lagr1d -x $x -y $y -xi $xi
} -result [list 10.453125 5.078125 7.953125 24.078125] -cleanup {
    unset x y xi
}

test lagr1dProcTest-5 {test procedure of Lagrange polynomial 1d interpolation} -match mtchLst -setup {
    set x [list -1 -0.6 -0.2 0.2 0.6 1]
    set y [list 0.0384615 0.1 0.5 0.5 0.1 0.0384615]
    set xi [list -1.4000 -1.3000 -1.2000 -1.1000 -1.0000 -0.9000 -0.8000 -0.7000 -1.0000 -0.5000 -0.4000 -0.3000\
                    -1.0000 -0.1000 0.0000 0.1000 -1.0000 0.3000 0.4000 0.5000 -1.0000 0.7000 0.8000 0.9000 1.0000\
                    1.1000 1.2000]
    set epsilon 1e-5
} -body {
    return [lagr1d -x $x -y $y -xi $xi]
} -result [list  1.79231 1.07512 0.567308 0.232812 0.0384615 -0.0460337 -0.0480769 0.0078125 0.0384615 0.209736\
                   0.321154 0.421274 0.0384615 0.55012 0.567308 0.55012 0.0384615 0.421274 0.321154 0.209736 0.0384615\
                   0.0078125 -0.0480769 -0.0460337 0.0384615 0.232813 0.567308] -cleanup {
    unset x y xi
}

### Least squares polynomial interpolation tests

test least1dProcTest-1 {test procedure of least squares polynomial interpolation} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set nterms 2
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    least1d -x $x -y $y -xi $xi -nterms $nterms
} -result [list 2.0 8.0 14.0 20.0] -cleanup {
    unset x y xi nterms
}

test least1dProcTest-2 {test procedure of least squares polynomial interpolation} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    least1d -x $x -y $y -xi $xi -coeffs
} -result "yi {2.25 6.25 12.25 20.25} coeffs {b {3.0 3.0 42.0} c {0.0 2.0 0.0} d {11.0 6.0 1.0}}" -cleanup {
    unset x y xi
}

test least1dProcTest-3 {test procedure of least squares polynomial interpolation} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set w [list 1 2 2 2 1]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    least1d -x $x -y $y -xi $xi -w $w -coeffs
} -result "yi {2.25 6.25 12.25 20.25} coeffs {b {3.0 3.0 54.0} c {0.0 1.5 0.0} d {10.5 6.0 1.0}}" -cleanup {
    unset x y xi w
}

test least1dProcTest-4 {test procedure of least squares polynomial interpolation} -match mtchLst -setup {
    set x [list -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1]
    set y [list -4 -4.29 -4.56 -4.81 -5.04 -5.25 -5.44 -5.61 -5.76 -5.89 -6 -6.09 -6.16 -6.21 -6.24 -6.25 -6.24 -6.21\
                   -6.16 -6.09 -6]
    set xi $x
} -body {
    least1d -x $x -y $y -xi $xi -nterms 1
} -result [list -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333\
                   -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333 -5.63333] -cleanup {
    unset x y xi
}

test least1dProcTest-5 {test procedure of least squares polynomial interpolation} -match mtchLst -setup {
    set x [list -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1]
    set y [list -4 -4.29 -4.56 -4.81 -5.04 -5.25 -5.44 -5.61 -5.76 -5.89 -6 -6.09 -6.16 -6.21 -6.24 -6.25 -6.24 -6.21\
                   -6.16 -6.09 -6]
    set xi $x
} -body {
    least1d -x $x -y $y -xi $xi -nterms 3
} -result [list -4 -4.29 -4.56 -4.81 -5.04 -5.25 -5.44 -5.61 -5.76 -5.89 -6 -6.09 -6.16 -6.21 -6.24 -6.25 -6.24 -6.21\
                   -6.16 -6.09 -6] -cleanup {
    unset x y xi
}

test least1dProcTest-6 {test procedure of least squares polynomial interpolation with different lengths of lists}\
        -setup {
    set x [list 1 2 3 4 5 6]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {least1d -x $x -y $y -xi $xi -nterms 3} errorStr
    return $errorStr
} -result "Length of -y '5' must be equal to length of -x '6'" -cleanup {
    unset x y xi errorStr
}

test least1dProcTest-7 {test procedure of least squares polynomial interpolation with zero length of xi} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi {}
} -body {
    catch {least1d -x $x -y $y -xi $xi -nterms 3} errorStr
    return $errorStr
} -result "Length of interpolation points list -xi must be more than zero" -cleanup {
    unset x y xi errorStr
}

test least1dProcTest-8 {test procedure of least squares polynomial interpolation with non-integer -nterms}\
        -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {least1d -x $x -y $y -xi $xi -nterms 1.0} errorStr
    return $errorStr
} -result "Number of terms -nterms '1.0' must be of integer type" -cleanup {
    unset x y xi errorStr
}

test least1dProcTest-9 {test procedure of least squares polynomial interpolation with different lengths of lists}\
        -setup {
    set x [list 1 2 3 4 5 6]
    set y [list 1 4 9 16 25 36]
    set xi [list 1.5 2.5 3.5 4.5]
    set w [list 1 1 1]        
} -body {
    catch {least1d -x $x -y $y -xi $xi -w $w -nterms 3} errorStr
    return $errorStr
} -result "Length of -w '3' must be equal to length of -x '6'" -cleanup {
    unset x y xi errorStr
}

test least1dProcTest-10 {test procedure of least squares polynomial interpolation with zero -nterms}\
        -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {least1d -x $x -y $y -xi $xi -nterms 0} errorStr
    return $errorStr
} -result "Number of terms -nterms must be more than zero" -cleanup {
    unset x y xi errorStr
}

### Least squares polynomial interpolation with derivative tests

test least1dDerProcTest-1 {test procedure of least squares polynomial interpolation with derivative} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set nterms 2
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    least1dDer -x $x -y $y -xi $xi -nterms $nterms
} -result "yi {2.0 8.0 14.0 20.0} yiDer {6.0 6.0 6.0 6.0}" -cleanup {
    unset x y xi nterms
}

test least1dDerProcTest-2 {test procedure of least squares polynomial interpolation with derivative} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set nterms 2
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    least1dDer -x $x -y $y -xi $xi -nterms $nterms -coeffs
} -result "yi {2.0 8.0 14.0 20.0} yiDer {6.0 6.0 6.0 6.0} coeffs {b {3.0 30.0} c {0.0 0.0} d {11.0 6.0}}" -cleanup {
    unset x y xi nterms
}

test least1dDerProcTest-3 {test procedure of least squares polynomial interpolation} -match mtchLst -setup {
    set x [list -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1]
    set y [list -4 -4.29 -4.56 -4.81 -5.04 -5.25 -5.44 -5.61 -5.76 -5.89 -6 -6.09 -6.16 -6.21 -6.24 -6.25 -6.24 -6.21\
                   -6.16 -6.09 -6]
    set xi $x
} -body {
    return [dget [least1dDer -x $x -y $y -xi $xi -nterms 3] yi]
} -result [list -4 -4.29 -4.56 -4.81 -5.04 -5.25 -5.44 -5.61 -5.76 -5.89 -6 -6.09 -6.16 -6.21 -6.24 -6.25 -6.24 -6.21\
                   -6.16 -6.09 -6] -cleanup {
    unset x y xi
}

test least1dDerProcTest-4 {test procedure of least squares polynomial interpolation} -match mtchLst -setup {
    set x [list -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1]
    set y [list -4 -4.29 -4.56 -4.81 -5.04 -5.25 -5.44 -5.61 -5.76 -5.89 -6 -6.09 -6.16 -6.21 -6.24 -6.25 -6.24 -6.21\
                   -6.16 -6.09 -6]
    set xi $x
} -body {
    return [dget [least1dDer -x $x -y $y -xi $xi -nterms 3] yiDer]
} -result [list -3 -2.8 -2.6 -2.4 -2.2 -2 -1.8 -1.6 -1.4 -1.2 -1 -0.8 -0.6 -0.4 -0.2 1.66533e-15 0.2 0.4 0.6 0.8 1]\
        -cleanup {
    unset x y xi
}

test least1dDerProcTest-5 {test procedure of least squares polynomial interpolation with different lengths of lists}\
        -setup {
    set x [list 1 2 3 4 5 6]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {least1dDer -x $x -y $y -xi $xi -nterms 3} errorStr
    return $errorStr
} -result "Length of -y '5' must be equal to length of -x '6'" -cleanup {
    unset x y xi errorStr
}

test least1dDerProcTest-6 {test procedure of least squares polynomial interpolation with zero length of xi} -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi {}
} -body {
    catch {least1dDer -x $x -y $y -xi $xi -nterms 3} errorStr
    return $errorStr
} -result "Length of interpolation points list -xi must be more than zero" -cleanup {
    unset x y xi errorStr
}

test least1dDerProcTest-7 {test procedure of least squares polynomial interpolation with non-integer -nterms}\
        -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {least1dDer -x $x -y $y -xi $xi -nterms 1.0} errorStr
    return $errorStr
} -result "Number of terms -nterms '1.0' must be of integer type" -cleanup {
    unset x y xi errorStr
}

test least1dDerProcTest-8 {test procedure of least squares polynomial interpolation with different lengths of lists}\
        -setup {
    set x [list 1 2 3 4 5 6]
    set y [list 1 4 9 16 25 36]
    set xi [list 1.5 2.5 3.5 4.5]
    set w [list 1 1 1]        
} -body {
    catch {least1dDer -x $x -y $y -xi $xi -w $w -nterms 3} errorStr
    return $errorStr
} -result "Length of -w '3' must be equal to length of -x '6'" -cleanup {
    unset x y xi errorStr
}

test least1dDerProcTest-9 {test procedure of least squares polynomial interpolation with zero -nterms}\
        -setup {
    set x [list 1 2 3 4 5]
    set y [list 1 4 9 16 25]
    set xi [list 1.5 2.5 3.5 4.5]
} -body {
    catch {least1dDer -x $x -y $y -xi $xi -nterms 0} errorStr
    return $errorStr
} -result "Number of terms -nterms must be more than zero" -cleanup {
    unset x y xi errorStr
}

### General Bezier function values calculation

test genBezierProcTest-1 {test procedure of general Bezier function values calculation} -match mtchLst -setup {
    set x [list 0.0 0.75 1.0]
    set y [list 1.0 0.0 1.0]
    set n 2
    set t [list 0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2\
                   0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4\
                   0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6\
                   0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8\
                   0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1]
} -body {
    set xi [dget [genBezier -n $n -x $x -y $y -t $t] xi]
} -result [list 0 0.01495 0.0298 0.04455 0.0592 0.07375 0.0882 0.10255 0.1168 0.13095 0.145 0.15895 0.1728 0.18655\
                   0.2002 0.21375 0.2272 0.24055 0.2538 0.26695 0.28 0.29295 0.3058 0.31855 0.3312 0.34375 0.3562\
                   0.36855 0.3808 0.39295 0.405 0.41695 0.4288 0.44055 0.4522 0.46375 0.4752 0.48655 0.4978 0.50895\
                   0.52 0.53095 0.5418 0.55255 0.5632 0.57375 0.5842 0.59455 0.6048 0.61495 0.625 0.63495 0.6448\
                   0.65455 0.6642 0.67375 0.6832 0.69255 0.7018 0.71095 0.72 0.72895 0.7378 0.74655 0.7552 0.76375\
                   0.7722 0.78055 0.7888 0.79695 0.805 0.81295 0.8208 0.82855 0.8362 0.84375 0.8512 0.85855 0.8658\
                   0.87295 0.88 0.88695 0.8938 0.90055 0.9072 0.91375 0.9202 0.92655 0.9328 0.93895 0.945 0.95095\
                   0.9568 0.96255 0.9682 0.97375 0.9792 0.98455 0.9898 0.99495 1] -cleanup {
    unset x y t n xi
}

test genBezierProcTest-2 {test procedure of general Bezier function values calculation} -match mtchLst -setup {
    set x [list 0.0 0.75 1.0]
    set y [list 1.0 0.0 1.0]
    set n 2
    set t [list 0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2\
                   0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4\
                   0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6\
                   0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8\
                   0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1]
} -body {
    set yi [dget [genBezier -n $n -x $x -y $y -t $t] yi]
} -result [list 1 0.9802 0.9608 0.9418 0.9232 0.905 0.8872 0.8698 0.8528 0.8362 0.82 0.8042 0.7888 0.7738 0.7592 0.745\
                   0.7312 0.7178 0.7048 0.6922 0.68 0.6682 0.6568 0.6458 0.6352 0.625 0.6152 0.6058 0.5968 0.5882 0.58\
                   0.5722 0.5648 0.5578 0.5512 0.545 0.5392 0.5338 0.5288 0.5242 0.52 0.5162 0.5128 0.5098 0.5072 0.505\
                   0.5032 0.5018 0.5008 0.5002 0.5 0.5002 0.5008 0.5018 0.5032 0.505 0.5072 0.5098 0.5128 0.5162 0.52\
                   0.5242 0.5288 0.5338 0.5392 0.545 0.5512 0.5578 0.5648 0.5722 0.58 0.5882 0.5968 0.6058 0.6152 0.625\
                   0.6352 0.6458 0.6568 0.6682 0.68 0.6922 0.7048 0.7178 0.7312 0.745 0.7592 0.7738 0.7888 0.8042 0.82\
                   0.8362 0.8528 0.8698 0.8872 0.905 0.9232 0.9418 0.9608 0.9802 1] -cleanup {
    unset x y t n yi
}

test genBezierProcTest-3 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0.0 0.75 1.0]
    set y [list 1.0 0.0 1.0]
    set n 3
    set t [list 0.0 0.5 1.0]
} -body {
    catch {genBezier -n $n -x $x -y $y -t $t} errorStr
    return $errorStr
} -result "Length of -x '3' must be equal to n+1=4" -cleanup {
    unset x y n t errorStr
}

test genBezierProcTest-4 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0.0 0.75 1.0]
    set y [list 1.0 0.0]
    set n 2
    set t [list 0.0 0.5 1.0]
} -body {
    catch {genBezier -n $n -x $x -y $y -t $t} errorStr
    return $errorStr
} -result "Length of -y '2' must be equal to n+1=3" -cleanup {
    unset x y n t errorStr
}

test genBezierProcTest-5 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0.0 0.75 1.0]
    set y [list 1.0 0.0 1.0]
    set n 2
    set t ""
} -body {
    catch {genBezier -n $n -x $x -y $y -t $t} errorStr
    return $errorStr
} -result "Length of points list -t must be more than zero" -cleanup {
    unset x y n t errorStr
}

test genBezierProcTest-6 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0.0 0.75 1.0]
    set y [list 1.0 0.0 1.0]
    set n -1
    set t ""
} -body {
    catch {genBezier -n $n -x $x -y $y -t $t} errorStr
    return $errorStr
} -result "Order of Bezier curve -n '-1' must be more than or equal to zero" -cleanup {
    unset x y n t errorStr
}

test genBezierProcTest-7 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0.0 0.75 1.0]
    set y [list 1.0 0.0 1.0]
    set n 1.5
    set t ""
} -body {
    catch {genBezier -n $n -x $x -y $y -t $t} errorStr
    return $errorStr
} -result "Order of Bezier curve -n '1.5' must be of integer type" -cleanup {
    unset x y n t errorStr
}

### Bezier function values calculation

test bezierProcTest-1 {test procedure of general Bezier function values calculation} -match mtchLst -setup {
    set x [list 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1]
    set y [list 1.0 0.0 1.0]
    set n 2
    set a 0.0
    set b 1.0
} -body {
    set yi [bezier -n $n -x $x -y $y -a $a -b $b]
} -result [list 1 0.905 0.82 0.745 0.68 0.625 0.58 0.545 0.52 0.505 0.5 0.505 0.52 0.545 0.58 0.625 0.68 0.745 0.82\
                   0.905 1] -cleanup {
    unset x y n a b yi
}

test bezierProcTest-2 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1]
    set y [list 1.0 0.0 1.0 0.0]
    set n 2
    set a 0.0
    set b 1.0
} -body {
    catch {bezier -n $n -x $x -y $y -a $a -b $b} errorStr
    return $errorStr
} -result "Length of -y '4' must be equal to n+1=3" -cleanup {
    unset x y n a b errorStr
}

test bezierProcTest-3 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1]
    set y [list 1.0 0.0 1.0]
    set n 2
    set a 1.0
    set b 1.0
} -body {
    catch {bezier -n $n -x $x -y $y -a $a -b $b} errorStr
    return $errorStr
} -result "Start -a '1.0' and end -b '1.0' values of interval must not be equal" -cleanup {
    unset x y n a b errorStr
}

test bezierProcTest-4 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1]
    set y [list 1.0 0.0 1.0]
    set n -1
    set a 1.0
    set b 1.0
} -body {
    catch {bezier -n $n -x $x -y $y -a $a -b $b} errorStr
    return $errorStr
} -result "Order of Bezier curve -n '-1' must be more than or equal to zero" -cleanup {
    unset x y n a b errorStr
}

test bezierProcTest-5 {test procedure of general Bezier function values calculation} -setup {
    set x [list 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1]
    set y [list 1.0 0.0 1.0]
    set n 1.5
    set a 1.0
    set b 1.0
} -body {
    catch {bezier -n $n -x $x -y $y -a $a -b $b} errorStr
    return $errorStr
} -result "Order of Bezier curve -n '1.5' must be of integer type" -cleanup {
    unset x y n a b errorStr
}

test bezierProcTest-6 {test procedure of general Bezier function values calculation} -setup {
    set x [list ]
    set y [list 1.0 0.0 1.0]
    set n 2
    set a 0.0
    set b 1.0
} -body {
    catch {bezier -n $n -x $x -y $y -a $a -b $b} errorStr
    return $errorStr
} -result "Length of points list -x must be more than zero" -cleanup {
    unset x y n a b errorStr
}

### Divided difference polynomial interpolation tests

test divDif1dProcTest-1 {test procedure of divided difference polynomial interpolation} -setup {
    set x [list 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0]
    set y [list 1.000000 2.718282 7.389056 20.085537 54.598150 148.413159 403.428793 1096.633158]
    set xi [list 2.5]
} -body {
    divDif1d -x $x -y $y -xi $xi
} -result "12.234320063964844" -cleanup {
    unset x y xi
}

test divDif1dProcTest-2 {test procedure of divided difference polynomial interpolation} -setup {
    set x [list 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0]
    set y [list 1.000000 2.718282 7.389056 20.085537 54.598150 148.413159 403.428793 1096.633158]
    set xi [list 2.5]
} -body {
    divDif1d -x $x -y $y -xi $xi -coeffs
} -result "yi 12.234320063964844 coeffs {1.0 1.7182819999999999 1.476246 0.8455358333333333 0.36321708333333347\
                0.12482190833333326 0.0357465236111111 0.008774660515873053}" -cleanup {
    unset x y xi
}

test divDif1dProcTest-3 {test procedure of divided difference polynomial interpolation} -setup {
    set x [list 0.0 1.0 2.0 3.0 7.0 5.0 6.0 7.0]
    set y [list 1.000000 2.718282 7.389056 20.085537 54.598150 148.413159 403.428793 1096.633158]
    set xi [list 2.5]
} -body {
    catch {divDif1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "List of -x values must not contain duplicated elements" -cleanup {
    unset x y xi errorStr
}

test divDif1dProcTest-4 {test procedure of divided difference polynomial interpolation} -setup {
    set x [list 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0]
    set y [list 1.000000 2.718282 7.389056 20.085537 54.598150 148.413159 403.428793 1096.633158]
    set xi [list 2.5]
} -body {
    catch {divDif1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Length of -y '8' must be equal to length of -x '9'" -cleanup {
    unset x y xi errorStr
}

test divDif1dProcTest-5 {test procedure of divided difference polynomial interpolation} -setup {
    set x [list 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 ]
    set y [list 1.000000 2.718282 7.389056 20.085537 54.598150 148.413159 403.428793 1096.633158]
    set xi [list ]
} -body {
    catch {divDif1d -x $x -y $y -xi $xi} errorStr
    return $errorStr
} -result "Length of interpolation points list -xi must be more than zero" -cleanup {
    unset x y xi errorStr
}

# test divDif1dProcTest-5 {test procedure of divided difference polynomial interpolation} -setup {
#     set x [list ]
#     set y [list ]
#     set xi [list 2.5]
# } -body {
#     catch {divDif1d -x $x -y $y -xi $xi} errorStr
#     return $errorStr
# } -result "Length of interpolation points list xi must be more than zero" -cleanup {
#     unset x y xi errorStr
# }

### Cubic B spline approximation tests

test cubicBSpline1dProcTest-1 {test procedure of cubic B spline approximant calculation} -match mtchLst -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9 10]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list 0.5 0.375 0.25 0.125 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.25 2.5 2.75 3 3.25 3.5 3.75 4 4.25 4.5 4.75 5\
                    5.25 5.5 5.75 6 6.25 6.5 6.75 7 7.25 7.5 7.75 8 8.25 8.5 8.75 9 9.25 9.5 9.75 10 10.125 10.25\
                    10.375 10.5]
} -body {
    cubicBSpline1d -t $t -y $y -ti $ti
} -result [list 0.289215 0.218446 0.146362 0.0734001 0 0.146362 0.289215 0.425053 0.550366 0.661871 0.757175 0.834112\
                   0.890511 0.924568 0.93592 0.924568 0.890511 0.834112 0.757175 0.661871 0.550366 0.425053 0.289215\
                   0.146362 1.11022e-16 -0.146362 -0.289215 -0.425053 -0.550366 -0.661871 -0.757175 -0.834112 -0.890511\
                   -0.924568 -0.93592 -0.924568 -0.890511 -0.834112 -0.757175 -0.661871 -0.550366 -0.425053 -0.289215\
                   -0.146362 -2.498e-16 0.0734001 0.146362 0.218446 0.289215] -cleanup {
    unset t y ti
}

test cubicBSpline1dProcTest-2 {test procedure of cubic B spline approximant calculation} -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list 0.5 0.375 0.25 0.125 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.25 2.5 2.75 3 3.25 3.5 3.75 4 4.25 4.5 4.75 5\
                    5.25 5.5 5.75 6 6.25 6.5 6.75 7 7.25 7.5 7.75 8 8.25 8.5 8.75 9 9.25 9.5 9.75 10 10.125 10.25\
                    10.375 10.5]
} -body {
    catch {cubicBSpline1d -t $t -y $y -ti $ti} errorStr
    return $errorStr
} -result "Length of -y '11' must be equal to length of -t '10'" -cleanup {
    unset t y ti errorStr
}

test cubicBSpline1dProcTest-3 {test procedure of cubic B spline approximant calculation} -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9 10]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list ]
} -body {
    catch {cubicBSpline1d -t $t -y $y -ti $ti} errorStr
    return $errorStr
} -result "Length of interpolation points list -ti must be more than zero" -cleanup {
    unset t y ti errorStr
}

### Cubic beta spline approximation tests

test cubicBetaSpline1dProcTest-1 {test procedure of cubic beta spline approximant calculation} -match mtchLst -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9 10]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list -0.5 -0.375 -0.25 -0.125 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.25 2.5 2.75 3 3.25 3.5 3.75 4 4.25 4.5\
                    4.75 5 5.25 5.5 5.75 6 6.25 6.5 6.75 7 7.25 7.5 7.75 8 8.25 8.5 8.75 9 9.25 9.5 9.75 10 10.125\
                    10.25 10.375 10.5]
} -body {
    cubicBetaSpline1d -beta1 1 -beta2 0 -t $t -y $y -ti $ti
} -result [list -0.289215 -0.218446 -0.146362 -0.0734001 0 0.146362 0.289215 0.425053 0.550366 0.661871 0.757175\
                   0.834112 0.890511 0.924568 0.93592 0.924568 0.890511 0.834112 0.757175 0.661871 0.550366 0.425053\
                   0.289215 0.146362 1.11022e-16 -0.146362 -0.289215 -0.425053 -0.550366 -0.661871 -0.757175 -0.834112\
                   -0.890511 -0.924568 -0.93592 -0.924568 -0.890511 -0.834112 -0.757175 -0.661871 -0.550366 -0.425053\
                   -0.289215 -0.146362 -2.498e-16 0.0734001 0.146362 0.218446 0.289215] -cleanup {
    unset t y ti
}

test cubicBetaSpline1dProcTest-2 {test procedure of cubic beta spline approximant calculation} -match mtchLst -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9 10]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list -0.5 -0.375 -0.25 -0.125 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.25 2.5 2.75 3 3.25 3.5 3.75 4 4.25 4.5\
                    4.75 5 5.25 5.5 5.75 6 6.25 6.5 6.75 7 7.25 7.5 7.75 8 8.25 8.5 8.75 9 9.25 9.5 9.75 10 10.125\
                    10.25 10.375 10.5]
} -body {
    cubicBetaSpline1d -beta1 1 -beta2 100 -t $t -y $y -ti $ti
} -result [list 0.493821 0.253349 0.0991202 0.0187861 0 0.0976829 0.293391 0.488348 0.583776 0.646403 0.768109 0.887847\
                   0.94457 0.948218 0.949435 0.948218 0.94457 0.887847 0.768109 0.646403 0.583776 0.488348 0.293391\
                   0.0976829 1.21431e-16 -0.0976829 -0.293391 -0.488348 -0.583776 -0.646403 -0.768109 -0.887847\
                   -0.94457 -0.948218 -0.949435 -0.948218 -0.94457 -0.887847 -0.768109 -0.646403 -0.583776 -0.488348\
                   -0.293391 -0.0976829 2.44596e-16 -0.0187861 -0.0991202 -0.253349 -0.493821] -cleanup {
    unset t y ti
}

test cubicBetaSpline1dProcTest-3 {test procedure of cubic beta spline approximant calculation} -match mtchLst -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9 10]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list -0.5 -0.375 -0.25 -0.125 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.25 2.5 2.75 3 3.25 3.5 3.75 4 4.25 4.5\
                    4.75 5 5.25 5.5 5.75 6 6.25 6.5 6.75 7 7.25 7.5 7.75 8 8.25 8.5 8.75 9 9.25 9.5 9.75 10 10.125\
                    10.25 10.375 10.5]
} -body {
    cubicBetaSpline1d -beta1 100 -beta2 0 -t $t -y $y -ti $ti
} -result [list -1.93953 -1.49508 -1.12416 -0.820073 -0.576146 -0.242029 -0.0683376 -0.00160438 0.0116391 0.345362\
                   0.518042 0.583355 0.594978 0.800836 0.906547 0.945493 0.951056 0.950418 0.948782 0.946484 0.943863\
                   0.736973 0.628614 0.585951 0.576146 0.242029 0.0683376 0.00160438 -0.0116391 -0.345362 -0.518042\
                   -0.583355 -0.594978 -0.800836 -0.906547 -0.945493 -0.951056 -0.950418 -0.948782 -0.946484 -0.943863\
                   -0.736973 -0.628614 -0.585951 -0.576146 -0.573304 -0.566362 -0.551217 -0.523763] -cleanup {
    unset t y ti
}

test cubicBetaSpline1dProcTest-4 {test procedure of cubic beta spline approximant calculation} -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list 0.5 0.375 0.25 0.125 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.25 2.5 2.75 3 3.25 3.5 3.75 4 4.25 4.5 4.75 5\
                    5.25 5.5 5.75 6 6.25 6.5 6.75 7 7.25 7.5 7.75 8 8.25 8.5 8.75 9 9.25 9.5 9.75 10 10.125 10.25\
                    10.375 10.5]
} -body {
    catch {cubicBetaSpline1d -beta1 100 -beta2 0 -t $t -y $y -ti $ti} errorStr
    return $errorStr
} -result "Length of -y '11' must be equal to length of -t '10'" -cleanup {
    unset t y ti errorStr
}

test cubicBetaSpline1dProcTest-5 {test procedure of cubic beta spline approximant calculation} -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9 10]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list ]
} -body {
    catch {cubicBetaSpline1d -beta1 100 -beta2 0 -t $t -y $y -ti $ti} errorStr
    return $errorStr
} -result "Length of interpolation points list -ti must be more than zero" -cleanup {
    unset t y ti errorStr
}

test cubicBetaSpline1dProcTest-6 {test procedure of cubic beta spline approximant calculation} -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9 10]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list -0.5 -0.375 -0.25 -0.125 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.25 2.5 2.75 3 3.25 3.5 3.75 4 4.25 4.5\
                    4.75 5 5.25 5.5 5.75 6 6.25 6.5 6.75 7 7.25 7.5 7.75 8 8.25 8.5 8.75 9 9.25 9.5 9.75 10 10.125\
                    10.25 10.375 10.5]
} -body {
    catch {cubicBetaSpline1d -beta1 100i -beta2 0 -t $t -y $y -ti $ti} errorStr
    return $errorStr
} -result "-beta1 '100i' must be of double type" -cleanup {
    unset t y ti errorStr
}

test cubicBetaSpline1dProcTest-7 {test procedure of cubic beta spline approximant calculation} -setup {
    set t [list 0 1 2 3 4 5 6 7 8 9 10]
    set y [list 0 0.587785 0.951057 0.951057 0.587785 1.22465e-16 -0.587785 -0.951057 -0.951057 -0.587785 -2.44929e-16]
    set ti [list -0.5 -0.375 -0.25 -0.125 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.25 2.5 2.75 3 3.25 3.5 3.75 4 4.25 4.5\
                    4.75 5 5.25 5.5 5.75 6 6.25 6.5 6.75 7 7.25 7.5 7.75 8 8.25 8.5 8.75 9 9.25 9.5 9.75 10 10.125\
                    10.25 10.375 10.5]
} -body {
    catch {cubicBetaSpline1d -beta1 100 -beta2 a0 -t $t -y $y -ti $ti} errorStr
    return $errorStr
} -result "-beta1 'a0' must be of double type" -cleanup {
    unset t y ti errorStr
}

### Cubic spline interpolation tests

test cubicSpline1dProcTest-1 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    cubicSpline1d -t $t -y $y -ti $ti
} -result [list 0.130689 0.0384615 0.0470256 0.0588235 0.0748403 0.1 0.140039 0.2 0.297358 0.5 0.820528 1 0.820528 0.5\
                   0.297358 0.2 0.140039 0.1 0.0748403 0.0588235 0.0470256 0.0384615 0.130689] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-2 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    return [dget [cubicSpline1d -t $t -y $y -ti $ti -deriv] yder1]
} -result [list -0.2539269444444438 0.06947027777777785 0.10181000000000001 0.13414972222222216 0.19603423611111112\
                   0.31700833333333345 0.4918818055555557 0.7154644444444443 1.3658504166666667 2.821133888888889\
                   3.0447165277777777 0.0 -3.044716527777778 -2.8211338888888893 -1.365850416666667 -0.7154644444444442\
                   -0.4918818055555556 -0.31700833333333345 -0.1960342361111111 -0.13414972222222216 -0.10181\
                   -0.06947027777777784 0.25392694444444364] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-3 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    dget [cubicSpline1d -t $t -y $y -ti $ti -deriv] yder2
} -result [list 0.32339722222222167 0.32339722222222167 0.32339722222222167 0.32339722222222167 0.9142930555555564\
                   1.5051888888888905 1.9922805555555556 2.4793722222222208 10.528347222222223 18.57732222222222\
                   -14.105669444444445 -46.78866111111111 -14.105669444444445 18.57732222222223 10.528347222222225\
                   2.4793722222222185 1.9922805555555545 1.5051888888888907 0.9142930555555565 0.32339722222222167\
                   0.32339722222222167 0.3233972222222216 0.32339722222222134] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-4 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    cubicSpline1d -t $t -y $y -ti $ti -ibcbeg der1 -ibcend der1 -ybcbeg 0.0739645 -ybcend -0.0739645
} -result [list 0.00502451 0.0384615 0.047168 0.0588235 0.0748021 0.1 0.140049 0.2 0.297356 0.5 0.820529 1 0.820529 0.5\
                   0.297356 0.2 0.140049 0.1 0.0748021 0.0588235 0.047168 0.0384615 0.00502451] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-5 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    dget [cubicSpline1d -t $t -y $y -ti $ti -ibcbeg der1 -ibcend der1 -ybcbeg 0.0739645 -ybcend -0.0739645 -deriv]\
            yder1
} -result [list 0.07516194019138352 0.0739645 0.10098749282296653 0.13294552870813392 0.19625464653110047\
                   0.3173308851674642 0.4918226710526317 0.7153784306220095 1.3658665442583733 2.821155392344498\
                   3.0447111519138756 4.440892098500626e-16 -3.044711151913876 -2.8211553923444974 -1.3658665442583728\
                   -0.7153784306220095 -0.49182267105263167 -0.3173308851674642 -0.19625464653110047\
                   -0.13294552870813392 -0.10098749282296651 -0.07396449999999999 -0.07516194019138286] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-6 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    cubicSpline1d -t $t -y $y -ti $ti -ibcbeg der2 -ibcend der2 -ybcbeg 0.210514 -ybcend 0.210514
} -result [list -0.0515433 0.0384615 0.0472321 0.0588235 0.0747849 0.1 0.140053 0.2 0.297354 0.5 0.820529 1 0.820529 0.5\
                   0.297354 0.2 0.140053 0.1 0.0747849 0.0588235 0.0472321 0.0384615 -0.0515433] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-7 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    dget [cubicSpline1d -t $t -y $y -ti $ti -ibcbeg der2 -ibcend der2 -ybcbeg 0.210514 -ybcend 0.210514 -deriv]\
            yder2
} -result [list -0.5051406823204383 0.210514 0.28207946823204383 0.3536449364640876 0.9253630953038683\
                   1.4970812541436485 1.989318150552486 2.4815550469613235 10.529126802486191 18.576698558011053\
                   -14.105825360497235 -46.78834927900552 -14.105825360497235 18.576698558011053 10.52912680248619\
                   2.481555046961323 1.9893181505524855 1.4970812541436482 0.9253630953038683 0.35364493646408773\
                   0.2820794682320439 0.210514 -0.5051406823204387] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-8 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    cubicSpline1d -t $t -y $y -ti $ti -ibcbeg notaknot -ibcend notaknot
} -result [list -1.05598 0.0384615 0.0483708 0.0588235 0.0744799 0.1 0.140135 0.2 0.297333 0.5 0.820533 1 0.820533 0.5\
                   0.297333 0.2 0.140135 0.1 0.0744799 0.0588235 0.0483708 0.0384615 -1.05598] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-9 {test procedure of cubic spline interpolation calculation} -match mtchLst -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    cubicSpline1d -t $t -y $y -ti $ti -ibcbeg der2 -ibcend der2 -ybcbeg 0.0 -ybcend 0.0
} -result [list -0.39139 0.0384615 0.0476174 0.0588235 0.0746817 0.1 0.140081 0.2 0.297347 0.5 0.820531 1 0.820531 0.5\
                   0.297347 0.2 0.140081 0.1 0.0746817 0.0588235 0.0476174 0.0384615 -0.39139] -cleanup {
    unset t y ti
}

test cubicSpline1dProcTest-10 {test procedure of cubic spline interpolation calculation} -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1 2]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list -2 -1 -0.9 -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 2]
} -body {
    catch {cubicSpline1d -t $t -y $y -ti $ti} errorStr
    return $errorStr
} -result "Length of -y '11' must be equal to length of -t '12'" -cleanup {
    unset t y ti errorStr
}

test cubicSpline1dProcTest-10 {test procedure of cubic spline interpolation calculation} -setup {
    set t [list -1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1]
    set y [list 0.0384615 0.0588235 0.1 0.2 0.5 1 0.5 0.2 0.1 0.0588235 0.0384615]
    set ti [list ]
} -body {
    catch {cubicSpline1d -t $t -y $y -ti $ti} errorStr
    return $errorStr
} -result "Length of interpolation points list -ti must be more than zero" -cleanup {
    unset t y ti errorStr
}

cleanupTests
